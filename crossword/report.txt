Sophie Lancaster
November 23, 2016
Lab Report for Lab #9

For this lab I made a program that created a crossword puzzle from a set of given words. In order to write this program I first constructed my own Crossword class and utilized it in a main program. I had to carefully choose which methods to include in both the crossword.cpp (implementation) and crossword.h (interface) files. The methods I chose to add to my class are outlined in detail below. After constructing the class I made a main function called crosswordmain.cpp. In this program I added the functionality for the list of words to be read in from the keyboard or from a text file. The main driver then calls the class functions to create the crossword boards and then displays the boards and a set of clues to the user.

From a user’s perspective if the program is just run with the executable the user is prompted to enter a list of words. Once the list of words is entered followed by a period the program executes and the empty crossword puzzle, solution crossword puzzle, and a list of clues are displayed to the user. The list of clues includes the coordinate of the first letter of the word followed by the orientation of the word and an anagram of the word. If the program is run with the executable followed by a text file the user is no longer prompted to enter words but is instead just displayed the crossword and clues.

From a programmer’s perspective this was the most difficult program I have had to write so far. The first thing I did was create the Crossword class. The private information in this class included the two crossword boards, a solution board and a clue board, a 2D array storing the information for the clues, and a vector of strings storing the words. In order to better understand all that went into this I will briefly explain all the different public methods that were contained in my class.
•	Crossword(): This method is the default constructor.
•	Crossword(vector<string>): This method is another constructor that brings in the words vector. This method is called from the driver program when creating the crossword object and so sets the class’s private vector to the vector of words that was created in the driver program. The method also initializes both the solutionBoard and the clueBoard by adding periods and pound signs respectively. Finally, this constructor calls the setMiddle method and the placeWords method, which add all the words from the vector to the solutionBoard.
•	~Crossword(): This method is the default destructor.
•	void setMiddle(string): This method reads in the first string of the words vector, which in its ordered state is the longest word that was entered. The method then determines where the word should be placed in the seventh row based on the number of the letters in the word. It uses a for loop to place the letters horizontally in the seventh row and aligns the letters in the columns so that the word is centered on the board. In this method the necessary data for the first word is also added to the clues array.
•	void placeWords(vector<string>): This method is in charge of placing all of the remaining words on the solutionBoard. It takes in the words vector and runs through each word of the vector and determines if that word matches any of the letters on the board. The findMatch method is called which in turn calls the isRoom method and the placeVertical / placeHorizontal methods. There is an if statement in this method that displays a message saying the word could not be placed if the findMatch method returns false.
•	void displaySolBoard(): This method uses simple nested for loops to display each element of the solutionBoard.
•	void displayClueBoard(): This method uses simple nested for loops to display each element of the clueBoard.
•	void addBlanks(): This method also uses nested for loops to go through each element of the solutionBoard and adds a blank space to that corresponding spot on the clueBoard.
•	vector<string> getAnagrams(): This method creates an anagrams vector which is necessary for the clues. It reads through every word in the words vector and then uses a C++ algorithm called random_shuffle that goes through the word and shuffles the letters. These new shuffled words are then added to the anagrams vector and the vector is returned from the method.
•	void displayClues(): This method formats and displays the information that is in the private clues array. It also calls the getAnagrams function in order to create the anagrams necessary for the clues.
•	bool checkBounds(int, int): This method checks the bounds of the board and returns a true if the point is in bounds and a false if the point is out of bounds.
•	bool isRoom(string, bool, int&, int&, int&): This is a very in depth method that takes in the word, its orientation, the coordinates of where that point matches another word, and the index of that point in the word. With this information this method utilizes many if statements and for loops to check all of the points around the spots where that word would be placed. If any of the checkBounds statements return false then the isRoom method returns false. Furthermore, if it is determined that one of the spots is right next to another letter false is also returned from the method. This allows the program to make sure that a word is only placed if there is at least one row of blank spaces between that letter and another letter.
•	bool findMatch(string, int&, int&, int&, int&): This method goes through the word and the board to see if there is a point where the two have a common letter. If a point is found the method then calls the isRoom method to determine if there is room to place that word. If the isRoom function returns true the placeVertical / placeHorizontal methods are called and the word is placed on the board.
•	void placeVertical(string, int&, int&, int&, int&): This method involves two parts. There is one for loop that goes through starting at the index and adds the letters of the word to the right of the index and another for loop that adds the letters of the word to the left of the index. In this method the starting point of the word and the word’s orientation are also added to the private clues array.
•	void placeHorizontal(string, int&, int&, int&, int&): This method involves two parts. There is one for loop that goes through starting at the index and adds the letters of the word above the index and another for loop that adds the letters of the word below the index. In this method the starting point of the word and the word’s orientation are also added to the private clues array.

After creating the class I then created the crosswordmain.cpp file or the main driver for this program. I had to create a few functions in the driver of the program. The functions I created in the main .cpp file were compare, readWords, orderStrings, and wordsFromFile. The readWords function prompts the user to enter a list of words and then utilizes a while loop to read in the data from the keyboard. There are some if statements that deal with necessary boundaries of the problem. For example, there is an if statement that ends the program if a word is too long, an if statement that ends the program if a non-alphabetic character is entered, an if statement that quits the while loop if a period is entered, and an if statement that quits the while loop if more than 20 words were entered. The function also contains a for loop that goes through all the characters of the string and turns them to uppercase letters. Finally, the words that are entered are added to the words vector. The wordsFromFile function does the same thing as the readWords function but it instead opens a text file and takes the words in from that. The compare function contains the condition that is used to order the strings in the orderStrings function. The orderStrings function calls the C++ sort algorithm, which starts at the beginning of the words vector and goes to the end sorting the words based on length. After creating the functions necessary for the driver I added some minimal code to the int main() part of the driver. I first have two if statements that run the appropriate readWords / wordsFromFile functions depending on the value of the argc variable. This tells the program to read the words from a file if more than one command is entered at the command line. Finally, I create the crossword object inputting the ordered vector of words and call the functions necessary to display the data to the user.

In order to verify that my program worked correctly I ran the program several times entering different lists of words and made sure that each list of words generated an appropriate output. I tried this for many different inputs and saw that it worked for whatever I tried which meant the program works.
